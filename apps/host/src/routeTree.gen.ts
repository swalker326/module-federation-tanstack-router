/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as MicroFrontendIndexImport } from './routes/micro-frontend/index';
import { Route as MicroFrontendMircoFrontendImport } from './routes/micro-frontend/mirco-frontend';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const MicroFrontendIndexRoute = MicroFrontendIndexImport.update({
  id: '/micro-frontend/',
  path: '/micro-frontend/',
  getParentRoute: () => rootRoute,
} as any);

const MicroFrontendMircoFrontendRoute = MicroFrontendMircoFrontendImport.update(
  {
    id: '/micro-frontend/mirco-frontend',
    path: '/micro-frontend/mirco-frontend',
    getParentRoute: () => rootRoute,
  } as any,
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/micro-frontend/mirco-frontend': {
      id: '/micro-frontend/mirco-frontend';
      path: '/micro-frontend/mirco-frontend';
      fullPath: '/micro-frontend/mirco-frontend';
      preLoaderRoute: typeof MicroFrontendMircoFrontendImport;
      parentRoute: typeof rootRoute;
    };
    '/micro-frontend/': {
      id: '/micro-frontend/';
      path: '/micro-frontend';
      fullPath: '/micro-frontend';
      preLoaderRoute: typeof MicroFrontendIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/micro-frontend/mirco-frontend': typeof MicroFrontendMircoFrontendRoute;
  '/micro-frontend': typeof MicroFrontendIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/micro-frontend/mirco-frontend': typeof MicroFrontendMircoFrontendRoute;
  '/micro-frontend': typeof MicroFrontendIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/micro-frontend/mirco-frontend': typeof MicroFrontendMircoFrontendRoute;
  '/micro-frontend/': typeof MicroFrontendIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/micro-frontend/mirco-frontend' | '/micro-frontend';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/micro-frontend/mirco-frontend' | '/micro-frontend';
  id: '__root__' | '/' | '/micro-frontend/mirco-frontend' | '/micro-frontend/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  MicroFrontendMircoFrontendRoute: typeof MicroFrontendMircoFrontendRoute;
  MicroFrontendIndexRoute: typeof MicroFrontendIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MicroFrontendMircoFrontendRoute: MicroFrontendMircoFrontendRoute,
  MicroFrontendIndexRoute: MicroFrontendIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/micro-frontend/mirco-frontend",
        "/micro-frontend/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/micro-frontend/mirco-frontend": {
      "filePath": "micro-frontend/mirco-frontend.tsx"
    },
    "/micro-frontend/": {
      "filePath": "micro-frontend/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
